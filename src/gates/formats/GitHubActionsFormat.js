/**
 * GitHubActionsFormat - GitHub Actions CI/CD output formatter
 *
 * Generates output compatible with GitHub Actions workflow:
 * - Sets output variables for workflow consumption
 * - Creates summary for GitHub Actions UI
 * - Provides proper exit codes and status
 */

export class GitHubActionsFormat {
  constructor() {
    this.formatName = 'github-actions';
  }

  /**
   * Format evaluation results for GitHub Actions
   *
   * @param {Object} results - Evaluation results
   * @param {Object} config - Quality gates configuration
   * @returns {Promise<string>} Formatted output
   */
  async format(results, config) {
    const output = [];
    
    // GitHub Actions summary
    output.push('## üéØ Quality Gates Results');
    output.push('');
    output.push(`**Status:** ${results.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
    output.push(`**Overall Score:** ${results.results.overall}`);
    output.push(`**Gates Passed:** ${results.summary.passed}/${results.summary.total}`);
    
    if (results.summary.warnings > 0) {
      output.push(`**Warnings:** ${results.summary.warnings}`);
    }
    
    output.push('');
    output.push('### Gate Details');
    output.push('');
    
    // Gate details table
    output.push('| Gate | Score | Threshold | Status |');
    output.push('|------|-------|-----------|--------|');
    
    results.gates.forEach(gate => {
      const status = gate.passed ? '‚úÖ PASS' : '‚ùå FAIL';
      const warning = gate.warning ? ' ‚ö†Ô∏è' : '';
      const threshold = gate.threshold ? gate.threshold : 'N/A';
      
      output.push(`| ${gate.name} | ${gate.score} | ${threshold} | ${status}${warning} |`);
    });
    
    // Failed gates details
    const failedGates = results.gates.filter(gate => !gate.passed);
    if (failedGates.length > 0) {
      output.push('');
      output.push('### ‚ùå Failed Gates');
      output.push('');
      
      failedGates.forEach(gate => {
        output.push(`- **${gate.name}**: ${gate.message}`);
        if (gate.details.issues && gate.details.issues.length > 0) {
          output.push('  - Issues:');
          gate.details.issues.forEach(issue => {
            output.push(`    - ${issue}`);
          });
        }
      });
    }
    
    // Warning gates details
    const warningGates = results.gates.filter(gate => gate.warning);
    if (warningGates.length > 0) {
      output.push('');
      output.push('### ‚ö†Ô∏è Warning Gates');
      output.push('');
      
      warningGates.forEach(gate => {
        output.push(`- **${gate.name}**: ${gate.message}`);
      });
    }
    
    // Recommendations
    if (results.results.categories) {
      const recommendations = this.extractRecommendations(results);
      if (recommendations.length > 0) {
        output.push('');
        output.push('### üöÄ Quick Fixes');
        output.push('');
        
        recommendations.slice(0, 5).forEach(rec => {
          output.push(`- ${rec}`);
        });
      }
    }
    
    output.push('');
    output.push('---');
    output.push(`*Generated by Context7 Quality Gates at ${new Date().toISOString()}*`);
    
    return output.join('\n');
  }

  /**
   * Set GitHub Actions output variables
   *
   * @param {Object} results - Evaluation results
   * @returns {void}
   */
  setOutputVariables(results) {
    // Set GitHub Actions output variables
    this.setOutput('quality-gates-passed', results.passed.toString());
    this.setOutput('quality-gates-score', results.results.overall.toString());
    this.setOutput('quality-gates-failed-count', results.summary.failed.toString());
    this.setOutput('quality-gates-total-count', results.summary.total.toString());
    this.setOutput('quality-gates-pass-rate', results.summary.passRate.toFixed(1));
    
    // Set individual gate results
    results.gates.forEach((gate, index) => {
      this.setOutput(`quality-gate-${index}-name`, gate.name);
      this.setOutput(`quality-gate-${index}-passed`, gate.passed.toString());
      this.setOutput(`quality-gate-${index}-score`, gate.score.toString());
    });
  }

  /**
   * Set GitHub Actions output variable
   *
   * @param {string} name - Variable name
   * @param {string} value - Variable value
   * @returns {void}
   */
  setOutput(name, value) {
    // In GitHub Actions, this would be written to $GITHUB_OUTPUT
    if (process.env.GITHUB_OUTPUT) {
      const fs = require('fs');
      fs.appendFileSync(process.env.GITHUB_OUTPUT, `${name}=${value}\n`);
    } else {
      // For testing or non-GitHub Actions environments
      console.log(`::set-output name=${name}::${value}`);
    }
  }

  /**
   * Extract actionable recommendations from results
   *
   * @param {Object} results - Evaluation results
   * @returns {Array<string>} Array of recommendations
   */
  extractRecommendations(results) {
    const recommendations = [];
    
    // Extract from failed gates
    results.gates
      .filter(gate => !gate.passed)
      .forEach(gate => {
        if (gate.details.suggestions && gate.details.suggestions.length > 0) {
          recommendations.push(...gate.details.suggestions.slice(0, 2));
        }
      });
    
    // Extract from warning gates
    results.gates
      .filter(gate => gate.warning)
      .forEach(gate => {
        if (gate.details.suggestions && gate.details.suggestions.length > 0) {
          recommendations.push(...gate.details.suggestions.slice(0, 1));
        }
      });
    
    return recommendations;
  }

  /**
   * Get GitHub Actions workflow example
   *
   * @returns {string} Workflow YAML example
   */
  getWorkflowExample() {
    return `name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Quality Gates
      id: quality-gates
      run: |
        npx codefortify score --gates --format=github-actions
        echo "passed=\${{ steps.quality-gates.outputs.quality-gates-passed }}" >> \$GITHUB_OUTPUT
        echo "score=\${{ steps.quality-gates.outputs.quality-gates-score }}" >> \$GITHUB_OUTPUT
    
    - name: Quality Gates Summary
      if: always()
      run: |
        echo "\${{ steps.quality-gates.outputs.quality-gates-summary }}" >> \$GITHUB_STEP_SUMMARY
    
    - name: Fail on Quality Gate Failure
      if: steps.quality-gates.outputs.quality-gates-passed == 'false'
      run: |
        echo "‚ùå Quality gates failed. Please fix the issues above."
        exit 1`;
  }
}
