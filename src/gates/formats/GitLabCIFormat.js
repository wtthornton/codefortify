/**
 * GitLabCIFormat - GitLab CI/CD output formatter
 *
 * Generates output compatible with GitLab CI/CD:
 * - Sets job variables for pipeline consumption
 * - Creates artifacts for download
 * - Provides proper exit codes and status
 */

export class GitLabCIFormat {
  constructor() {
    this.formatName = 'gitlab-ci';
  }

  /**
   * Format evaluation results for GitLab CI
   *
   * @param {Object} results - Evaluation results
   * @param {Object} config - Quality gates configuration
   * @returns {Promise<string>} Formatted output
   */
  async format(results, config) {
    const output = [];
    
    // GitLab CI summary
    output.push('# üéØ Quality Gates Results');
    output.push('');
    output.push(`**Status:** ${results.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
    output.push(`**Overall Score:** ${results.results.overall}`);
    output.push(`**Gates Passed:** ${results.summary.passed}/${results.summary.total}`);
    
    if (results.summary.warnings > 0) {
      output.push(`**Warnings:** ${results.summary.warnings}`);
    }
    
    output.push('');
    output.push('## Gate Details');
    output.push('');
    
    // Gate details table
    output.push('| Gate | Score | Threshold | Status |');
    output.push('|------|-------|-----------|--------|');
    
    results.gates.forEach(gate => {
      const status = gate.passed ? '‚úÖ PASS' : '‚ùå FAIL';
      const warning = gate.warning ? ' ‚ö†Ô∏è' : '';
      const threshold = gate.threshold ? gate.threshold : 'N/A';
      
      output.push(`| ${gate.name} | ${gate.score} | ${threshold} | ${status}${warning} |`);
    });
    
    // Failed gates details
    const failedGates = results.gates.filter(gate => !gate.passed);
    if (failedGates.length > 0) {
      output.push('');
      output.push('## ‚ùå Failed Gates');
      output.push('');
      
      failedGates.forEach(gate => {
        output.push(`- **${gate.name}**: ${gate.message}`);
        if (gate.details.issues && gate.details.issues.length > 0) {
          output.push('  - Issues:');
          gate.details.issues.forEach(issue => {
            output.push(`    - ${issue}`);
          });
        }
      });
    }
    
    // Warning gates details
    const warningGates = results.gates.filter(gate => gate.warning);
    if (warningGates.length > 0) {
      output.push('');
      output.push('## ‚ö†Ô∏è Warning Gates');
      output.push('');
      
      warningGates.forEach(gate => {
        output.push(`- **${gate.name}**: ${gate.message}`);
      });
    }
    
    // Recommendations
    if (results.results.categories) {
      const recommendations = this.extractRecommendations(results);
      if (recommendations.length > 0) {
        output.push('');
        output.push('## üöÄ Quick Fixes');
        output.push('');
        
        recommendations.slice(0, 5).forEach(rec => {
          output.push(`- ${rec}`);
        });
      }
    }
    
    output.push('');
    output.push('---');
    output.push(`*Generated by Context7 Quality Gates at ${new Date().toISOString()}*`);
    
    return output.join('\n');
  }

  /**
   * Set GitLab CI job variables
   *
   * @param {Object} results - Evaluation results
   * @returns {void}
   */
  setJobVariables(results) {
    // Set GitLab CI job variables
    this.setVariable('QUALITY_GATES_PASSED', results.passed.toString());
    this.setVariable('QUALITY_GATES_SCORE', results.results.overall.toString());
    this.setVariable('QUALITY_GATES_FAILED_COUNT', results.summary.failed.toString());
    this.setVariable('QUALITY_GATES_TOTAL_COUNT', results.summary.total.toString());
    this.setVariable('QUALITY_GATES_PASS_RATE', results.summary.passRate.toFixed(1));
    
    // Set individual gate results
    results.gates.forEach((gate, index) => {
      this.setVariable(`QUALITY_GATE_${index}_NAME`, gate.name);
      this.setVariable(`QUALITY_GATE_${index}_PASSED`, gate.passed.toString());
      this.setVariable(`QUALITY_GATE_${index}_SCORE`, gate.score.toString());
    });
  }

  /**
   * Set GitLab CI job variable
   *
   * @param {string} name - Variable name
   * @param {string} value - Variable value
   * @returns {void}
   */
  setVariable(name, value) {
    // In GitLab CI, this would be written to a file that gets sourced
    const variableFile = process.env.CI_JOB_VARIABLES_FILE || 'ci-variables.env';
    const fs = require('fs');
    fs.appendFileSync(variableFile, `export ${name}="${value}"\n`);
  }

  /**
   * Extract actionable recommendations from results
   *
   * @param {Object} results - Evaluation results
   * @returns {Array<string>} Array of recommendations
   */
  extractRecommendations(results) {
    const recommendations = [];
    
    // Extract from failed gates
    results.gates
      .filter(gate => !gate.passed)
      .forEach(gate => {
        if (gate.details.suggestions && gate.details.suggestions.length > 0) {
          recommendations.push(...gate.details.suggestions.slice(0, 2));
        }
      });
    
    // Extract from warning gates
    results.gates
      .filter(gate => gate.warning)
      .forEach(gate => {
        if (gate.details.suggestions && gate.details.suggestions.length > 0) {
          recommendations.push(...gate.details.suggestions.slice(0, 1));
        }
      });
    
    return recommendations;
  }

  /**
   * Get GitLab CI pipeline example
   *
   * @returns {string} Pipeline YAML example
   */
  getPipelineExample() {
    return `# .gitlab-ci.yml
stages:
  - quality-gates

quality-gates:
  stage: quality-gates
  image: node:18
  before_script:
    - npm ci
  script:
    - npx codefortify score --gates --format=gitlab-ci --output=quality-gates.md
    - |
      if [ "$QUALITY_GATES_PASSED" = "false" ]; then
        echo "‚ùå Quality gates failed"
        exit 1
      else
        echo "‚úÖ Quality gates passed"
      fi
  artifacts:
    reports:
      markdown: quality-gates.md
    paths:
      - quality-gates.md
    expire_in: 1 week
  variables:
    QUALITY_GATES_PASSED: "false"
    QUALITY_GATES_SCORE: "0"
    QUALITY_GATES_FAILED_COUNT: "0"
    QUALITY_GATES_TOTAL_COUNT: "0"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "develop"`;
  }
}
