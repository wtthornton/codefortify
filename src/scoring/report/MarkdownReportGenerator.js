/**
 * Markdown Report Generator
 *
 * Generates formatted markdown reports for documentation and CLI output
 */

export class MarkdownReportGenerator {
  /**
   * Generate markdown report
   * @param {Object} results - Scoring results
   * @returns {Promise<string>} Markdown content
   */
  async generate(results) {
    const { overall, categories, recommendations, metadata } = results;
    let markdown = '';

    // Header
    markdown += '# Context7 Quality Score Report\n\n';
    markdown += `**Project:** ${metadata.projectName}\n`;
    markdown += `**Type:** ${metadata.projectType}\n`;    /**
   * Performs the specified operation
   * @param {any} metadata.version
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} metadata.version
   * @returns {any} The operation result
   */

    if (metadata.version) {
      markdown += `**Version:** ${metadata.version}\n`;
    }
    markdown += `**Generated:** ${new Date().toLocaleString()}\n\n`;

    // Overall Score
    markdown += '## Overall Results\n\n';
    markdown += `**Score:** ${overall.score}/${overall.maxScore} (${overall.grade})\n`;
    markdown += `**Percentage:** ${overall.percentage}%\n\n`;
    markdown += this.getScoreDescription(overall.percentage) + '\n\n';

    // Category Breakdown
    markdown += '## Category Breakdown\n\n';

    for (const [key, category] of Object.entries(categories)) {
      const percentage = Math.round((category.score / category.maxScore) * 100);
      const emoji = this.getCategoryEmoji(percentage);

      markdown += `### ${emoji} ${category.categoryName}\n\n`;
      markdown += `- **Score:** ${category.score}/${category.maxScore} (${percentage}%)\n`;
      markdown += `- **Grade:** ${category.grade}\n`;      /**
   * Performs the specified operation
   * @param {boolean} category.issues && category.issues.length > 0
   * @returns {boolean} True if successful, false otherwise
   */
      /**
   * Performs the specified operation
   * @param {boolean} category.issues && category.issues.length > 0
   * @returns {boolean} True if successful, false otherwise
   */


      if (category.issues && category.issues.length > 0) {
        markdown += '\n**Issues:**\n';
        category.issues.forEach(issue => {
          markdown += `- ${issue}\n`;
        });
      }

      markdown += '\n';
    }

    // Recommendations    /**
   * Performs the specified operation
   * @param {any} recommendations && recommendations.length > 0
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} recommendations && recommendations.length > 0
   * @returns {any} The operation result
   */

    if (recommendations && recommendations.length > 0) {
      markdown += '## üéØ Priority Recommendations\n\n';

      const priorityRecs = recommendations
        .sort((a, b) => b.impact - a.impact)
        .slice(0, 10);

      priorityRecs.forEach((rec, index) => {
        markdown += `${index + 1}. **[+${rec.impact}pts]** ${rec.suggestion}\n`;
        markdown += `   - ${rec.description}\n\n`;
      });
    }

    // Footer
    markdown += '---\n';
    markdown += '*Generated by Context7 MCP Quality Analysis*\n';

    return markdown;
  }  /**
   * Retrieves data
   * @param {any} percentage
   * @returns {string} The retrieved data
   */
  /**
   * Retrieves data
   * @param {any} percentage
   * @returns {string} The retrieved data
   */


  getCategoryEmoji(percentage) {  /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 90) {return '‚úÖ';}    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 70) {return '‚ö°';}    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 50) {return '‚ö†Ô∏è';}
    return '‚ùå';
  }  /**
   * Retrieves data
   * @param {any} percentage
   * @returns {string} The retrieved data
   */
  /**
   * Retrieves data
   * @param {any} percentage
   * @returns {string} The retrieved data
   */


  getScoreDescription(percentage) {  /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 95) {return 'üåü **Outstanding** - This codebase demonstrates excellence across all categories.';}    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 85) {return '‚ú® **Very Good** - Strong fundamentals with minor areas for improvement.';}    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 70) {return 'üëç **Good** - Solid foundation with some recommended improvements.';}    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 60) {return 'üìù **Acceptable** - Significant improvements needed in several areas.';}    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} percentage > - Optional parameter
   * @returns {any} The operation result
   */

    if (percentage >= 50) {return '‚ö†Ô∏è **Below Average** - Major improvements required across multiple categories.';}
    return 'üö® **Poor** - Significant refactoring needed before production use.';
  }
}