<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="129" failures="4" errors="0" time="41.757">
    <testsuite name="tests/cli/context7-cli.test.js" timestamp="2025-08-31T17:46:04.183Z" hostname="Mini_IT13" tests="28" failures="2" errors="0" skipped="4" time="40.0275768">
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Help and Version &gt; should display help when no arguments provided" time="0.9963018">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Help and Version &gt; should display help with --help flag" time="0.8048966">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Help and Version &gt; should display version with --version flag" time="0.7605568">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; should display init help" time="0.7505512">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; should initialize a React project" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; should handle missing project type with prompt" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; original prompt test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Add Command &gt; should display add help" time="0.7588574">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Add Command &gt; should add Context7 to existing project" time="0.853886">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Validate Command &gt; should display validate help" time="0.6656994">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Validate Command &gt; should validate project structure" time="0.5427155">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Validate Command &gt; should handle validation in strict mode" time="0.6362953">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Test-MCP Command &gt; should display test-mcp help" time="0.6017929">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Test-MCP Command &gt; should handle missing MCP server file" time="30.0590658">
            <failure message="CLI command timed out" type="Error">
Error: CLI command timed out
 ❯ Timeout._onTimeout tests/cli/context7-cli.test.js:49:14
            </failure>
            <failure message="CLI command timed out" type="Error">
Error: CLI command timed out
 ❯ Timeout._onTimeout tests/cli/context7-cli.test.js:49:14
            </failure>
            <failure message="CLI command timed out" type="Error">
Error: CLI command timed out
 ❯ Timeout._onTimeout tests/cli/context7-cli.test.js:49:14
            </failure>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Serve Command &gt; should display serve help" time="0.4881569">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Generate Command &gt; should display generate help" time="0.5756177">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Generate Command &gt; should handle generate component" time="1.5106009">
            <failure message="expected &apos;&apos; to contain &apos;component&apos;" type="AssertionError">
AssertionError: expected &apos;&apos; to contain &apos;component&apos;

- Expected
+ Received

- component

 ❯ tests/cli/context7-cli.test.js:253:29
            </failure>
            <failure message="expected &apos;&apos; to contain &apos;component&apos;" type="AssertionError">
AssertionError: expected &apos;&apos; to contain &apos;component&apos;

- Expected
+ Received

- component

 ❯ tests/cli/context7-cli.test.js:253:29
            </failure>
            <failure message="expected &apos;&apos; to contain &apos;component&apos;" type="AssertionError">
AssertionError: expected &apos;&apos; to contain &apos;component&apos;

- Expected
+ Received

- component

 ❯ tests/cli/context7-cli.test.js:253:29
            </failure>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Update Command &gt; should display update help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Update Command &gt; should handle update command" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Global Options &gt; should handle verbose flag" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Global Options &gt; should handle custom project root" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Error Handling &gt; should handle unknown commands" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Error Handling &gt; should handle invalid options" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Error Handling &gt; should handle permission errors gracefully" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Project Type Detection &gt; should detect React projects" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Project Type Detection &gt; should handle projects without package.json" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Configuration Loading &gt; should load custom configuration when available" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Interactive Prompts &gt; should handle non-interactive environments" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/PatternProvider.test.js" timestamp="2025-08-31T17:46:04.200Z" hostname="Mini_IT13" tests="24" failures="1" errors="0" skipped="0" time="0.0597676">
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; constructor &gt; should initialize with correct config" time="0.002358">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; generatePatterns &gt; should generate React patterns for react-webapp" time="0.0014876">
            <system-err>
PatternProvider: Generating patterns for react-webapp
PatternProvider: Patterns generated successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; generatePatterns &gt; should generate Vue patterns for vue-webapp" time="0.0003396">
            <system-err>
PatternProvider: Generating patterns for vue-webapp
PatternProvider: Patterns generated successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; generatePatterns &gt; should generate Node patterns for node-api" time="0.0002753">
            <system-err>
PatternProvider: Generating patterns for node-api
PatternProvider: Patterns generated successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; generatePatterns &gt; should generate JavaScript patterns for unknown type" time="0.000284">
            <system-err>
PatternProvider: Generating patterns for unknown
PatternProvider: Patterns generated successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should return React component pattern" time="0.0005812">
            <system-err>
PatternProvider: Getting pattern component for react-webapp
PatternProvider: Pattern retrieved successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should return React hook pattern" time="0.0003046">
            <system-err>
PatternProvider: Getting pattern hook for react-webapp
PatternProvider: Pattern retrieved successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should return service pattern" time="0.0002946">
            <system-err>
PatternProvider: Getting pattern service for react-webapp
PatternProvider: Pattern retrieved successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should return Vue component pattern" time="0.0003975">
            <system-err>
PatternProvider: Getting pattern component for vue-webapp
PatternProvider: Pattern retrieved successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should return Node service pattern" time="0.00033">
            <system-err>
PatternProvider: Getting pattern service for node-api
PatternProvider: Pattern retrieved successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should return &quot;Pattern not found&quot; for unknown pattern" time="0.0232983">
            <system-err>
PatternProvider: Getting pattern unknown for react-webapp
PatternProvider: Getting pattern unknown for react-webapp
PatternProvider: Getting pattern unknown for react-webapp

            </system-err>
            <failure message="expected &apos;Pattern \&apos;unknown\&apos; not found for fra…&apos; to be &apos;Pattern not found for this framework&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;Pattern \&apos;unknown\&apos; not found for fra…&apos; to be &apos;Pattern not found for this framework&apos; // Object.is equality

Expected: &quot;Pattern not found for this framework&quot;
Received: &quot;Pattern &apos;unknown&apos; not found for framework &apos;react-webapp&apos;. Available patterns: component, hook, service, test&quot;

 ❯ tests/unit/PatternProvider.test.js:105:23
            </failure>
            <failure message="expected &apos;Pattern \&apos;unknown\&apos; not found for fra…&apos; to be &apos;Pattern not found for this framework&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;Pattern \&apos;unknown\&apos; not found for fra…&apos; to be &apos;Pattern not found for this framework&apos; // Object.is equality

Expected: &quot;Pattern not found for this framework&quot;
Received: &quot;Pattern &apos;unknown&apos; not found for framework &apos;react-webapp&apos;. Available patterns: component, hook, service, test&quot;

 ❯ tests/unit/PatternProvider.test.js:105:23
            </failure>
            <failure message="expected &apos;Pattern \&apos;unknown\&apos; not found for fra…&apos; to be &apos;Pattern not found for this framework&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;Pattern \&apos;unknown\&apos; not found for fra…&apos; to be &apos;Pattern not found for this framework&apos; // Object.is equality

Expected: &quot;Pattern not found for this framework&quot;
Received: &quot;Pattern &apos;unknown&apos; not found for framework &apos;react-webapp&apos;. Available patterns: component, hook, service, test&quot;

 ❯ tests/unit/PatternProvider.test.js:105:23
            </failure>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getPattern &gt; should fallback to JavaScript patterns for unknown framework" time="0.0011406">
            <system-err>
PatternProvider: Getting pattern class for unknown-framework
PatternProvider: Pattern retrieved successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getReactComponentPattern &gt; should include all required React patterns" time="0.0006101">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getReactHookPattern &gt; should include all required hook patterns" time="0.0007205">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getServicePattern &gt; should include all required service patterns" time="0.0004704">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getNodePatterns &gt; should include Node.js patterns" time="0.0003909">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getNodeServicePattern &gt; should include Node service patterns" time="0.0003884">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getMiddlewarePattern &gt; should include Express middleware patterns" time="0.0002595">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; getRoutePattern &gt; should include Express route patterns" time="0.0002451">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; generateComponentScaffold &gt; should generate React component scaffold" time="0.0006244">
            <system-err>
PatternProvider: Generating scaffold for UserProfile (page)
PatternProvider: Component scaffold generated successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; generateComponentScaffold &gt; should handle empty props array" time="0.0003533">
            <system-err>
PatternProvider: Generating scaffold for EmptyComponent (ui)
PatternProvider: Component scaffold generated successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; Vue patterns &gt; should generate Vue component pattern" time="0.0004836">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; JavaScript patterns &gt; should generate JavaScript class pattern" time="0.000471">
        </testcase>
        <testcase classname="tests/unit/PatternProvider.test.js" name="PatternProvider &gt; JavaScript patterns &gt; should generate JavaScript function pattern" time="0.0004704">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/ProjectScorer.test.js" timestamp="2025-08-31T17:46:04.211Z" hostname="Mini_IT13" tests="19" failures="0" errors="0" skipped="7" time="4.6588848">
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Constructor and Configuration &gt; should initialize with default configuration" time="0.0096646">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Constructor and Configuration &gt; should initialize analyzers correctly" time="0.001893">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Constructor and Configuration &gt; should set correct max scores for analyzers" time="0.0017261">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Grade Calculation &gt; should calculate grades correctly" time="0.0029387">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Project Type Detection &gt; should detect React projects" time="0.0017164">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Project Type Detection &gt; should detect Node.js API projects" time="0.0018752">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Project Type Detection &gt; should default to javascript when detection fails" time="0.0056639">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Overall Score Calculation &gt; should calculate overall score correctly" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Overall Score Calculation &gt; should handle errors in categories" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Overall Score Calculation &gt; should set timestamp" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Complexity Calculation &gt; should calculate complexity scores correctly" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Static Factory Methods &gt; should create scorer via static scoreProject method" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Static Factory Methods &gt; should create scorer via static autoDetectAndScore method" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Static Factory Methods &gt; original autoDetectAndScore test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Dependency Analysis &gt; should identify frameworks correctly" time="0.0021108">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Dependency Analysis &gt; should identify testing tools correctly" time="0.001294">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Dependency Analysis &gt; should identify build tools correctly" time="0.0011559">
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Error Handling &gt; should handle analyzer failures gracefully" time="2.5340042">
            <system-out>
🎯 Analyzing test-project project quality...
══════════════════════════════════════════════════════════

📊 Analyzing Test Category...

            </system-out>
            <system-err>
❌ Analysis failed for test: Test error

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ProjectScorer.test.js" name="ProjectScorer &gt; Error Handling &gt; should validate category names" time="2.0759648">
            <system-out>
🎯 Analyzing test-project project quality...
══════════════════════════════════════════════════════════

            </system-out>
            <system-err>
Warning: Invalid categories ignored: nonexistent
❌ Scoring failed: No valid categories specified for analysis

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/ResourceManager.test.js" timestamp="2025-08-31T17:46:04.217Z" hostname="Mini_IT13" tests="14" failures="0" errors="0" skipped="5" time="0.0409681">
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; constructor &gt; should initialize with correct config" time="0.0029192">
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; listResources &gt; should return default resources" time="0.004917">
            <system-err>
ResourceManager: Listing resources...
ResourceManager: Resources listed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; listResources &gt; should include custom resources when they exist" time="0.0034366">
            <system-err>
ResourceManager: Listing resources...
ResourceManager: Resources listed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should read tech-stack resource" time="0.0027821">
            <system-err>
ResourceManager: Reading resource context7://standards/tech-stack
ResourceManager: Resource read successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should read code-style resource" time="0.0005343">
            <system-err>
ResourceManager: Reading resource context7://standards/code-style
ResourceManager: Resource read successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should read context7-standards resource" time="0.000411">
            <system-err>
ResourceManager: Reading resource context7://standards/context7-standards
ResourceManager: Resource read successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should generate component patterns for project type" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should read custom resources" time="0.0006259">
            <system-err>
ResourceManager: Reading resource context7://custom/api-docs
ResourceManager: Resource read successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should handle file read errors" time="0.0019832">
            <system-err>
ResourceManager: Reading resource context7://standards/tech-stack
ResourceManager: Resource read failed for context7://standards/tech-stack: File not found

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; readResource &gt; should handle unknown resource URIs" time="0.0004784">
            <system-err>
ResourceManager: Reading resource context7://unknown/resource
ResourceManager: Resource read failed for context7://unknown/resource: Unknown resource: context7://unknown/resource

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; generatePatternContent &gt; should generate React patterns for react-webapp project" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; generatePatternContent &gt; should generate Vue patterns for vue-webapp project" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; generatePatternContent &gt; should generate Node patterns for node-api project" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/ResourceManager.test.js" name="ResourceManager &gt; generatePatternContent &gt; should generate JavaScript patterns for unknown project type" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/ScoringReport.test.js" timestamp="2025-08-31T17:46:04.219Z" hostname="Mini_IT13" tests="23" failures="1" errors="0" skipped="0" time="0.0838109">
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Performance Level Classification &gt; should classify performance levels correctly" time="0.0071567">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Score Descriptions &gt; should provide appropriate score descriptions" time="0.01937">
            <failure message="expected &apos;Acceptable quality, focus on key impr…&apos; to contain &apos;Good quality&apos;" type="AssertionError">
AssertionError: expected &apos;Acceptable quality, focus on key impr…&apos; to contain &apos;Good quality&apos;

Expected: &quot;Good quality&quot;
Received: &quot;Acceptable quality, focus on key improvements&quot;

 ❯ tests/unit/ScoringReport.test.js:76:46
            </failure>
            <failure message="expected &apos;Acceptable quality, focus on key impr…&apos; to contain &apos;Good quality&apos;" type="AssertionError">
AssertionError: expected &apos;Acceptable quality, focus on key impr…&apos; to contain &apos;Good quality&apos;

Expected: &quot;Good quality&quot;
Received: &quot;Acceptable quality, focus on key improvements&quot;

 ❯ tests/unit/ScoringReport.test.js:76:46
            </failure>
            <failure message="expected &apos;Acceptable quality, focus on key impr…&apos; to contain &apos;Good quality&apos;" type="AssertionError">
AssertionError: expected &apos;Acceptable quality, focus on key impr…&apos; to contain &apos;Good quality&apos;

Expected: &quot;Good quality&quot;
Received: &quot;Acceptable quality, focus on key improvements&quot;

 ❯ tests/unit/ScoringReport.test.js:76:46
            </failure>
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Category Descriptions &gt; should provide descriptions for all categories" time="0.0043531">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Category Descriptions &gt; should provide default description for unknown categories" time="0.0003003">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should generate valid HTML structure" time="0.022977">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should include project information" time="0.0003882">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should include Chart.js integration" time="0.000436">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should include FontAwesome icons" time="0.0004155">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should include all categories" time="0.0004671">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should display issues correctly" time="0.0007588">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should display recommendations" time="0.0034286">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should include theme toggle functionality" time="0.0010021">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should include search functionality" time="0.0013582">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should handle missing recommendations" time="0.0006402">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; HTML Report Generation &gt; should format scores with proper precision" time="0.000773">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; JSON Report Generation &gt; should generate valid JSON" time="0.0019157">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; JSON Report Generation &gt; should format JSON with proper indentation" time="0.0003477">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Markdown Report Generation &gt; should generate valid markdown" time="0.0009396">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Markdown Report Generation &gt; should include project metadata" time="0.0003115">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Markdown Report Generation &gt; should include category information" time="0.000277">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Markdown Report Generation &gt; should include recommendations when present" time="0.0002654">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Markdown Report Generation &gt; should use appropriate emojis based on scores" time="0.0002157">
        </testcase>
        <testcase classname="tests/unit/ScoringReport.test.js" name="ScoringReport &gt; Browser Opening &gt; should handle browser opening on different platforms" time="0.0001708">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/ToolManager.test.js" timestamp="2025-08-31T17:46:04.227Z" hostname="Mini_IT13" tests="21" failures="0" errors="0" skipped="0" time="0.0612507">
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; constructor &gt; should initialize with correct config" time="0.002988">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; listTools &gt; should return all available tools" time="0.0031599">
            <system-err>
ToolManager: Listing tools...
ToolManager: Tools listed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; listTools &gt; should include proper tool schemas" time="0.0012677">
            <system-err>
ToolManager: Listing tools...
ToolManager: Tools listed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; executeTool &gt; should execute validate_context7_compliance tool" time="0.0013302">
            <system-err>
ToolManager: Executing tool validate_context7_compliance
ToolManager: Tool executed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; executeTool &gt; should execute get_pattern_examples tool" time="0.0239967">
            <system-err>
ToolManager: Executing tool get_pattern_examples

PatternProvider: Getting pattern component for react
PatternProvider: Pattern retrieved successfully
ToolManager: Tool executed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; executeTool &gt; should execute check_naming_conventions tool" time="0.0017672">
            <system-err>
ToolManager: Executing tool check_naming_conventions
ToolManager: Tool executed successfully

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; executeTool &gt; should throw error for unknown tool" time="0.0019551">
            <system-err>
ToolManager: Executing tool unknown_tool
ToolManager: Tool execution failed for unknown_tool: Unknown tool: unknown_tool

            </system-err>
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; validateContext7Compliance &gt; should validate React component code" time="0.0003762">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; validateContext7Compliance &gt; should find issues in non-compliant React code" time="0.0003755">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; validateContext7Compliance &gt; should validate custom hooks" time="0.0003936">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; validateContext7Compliance &gt; should find issues with bad hook naming" time="0.0002838">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; checkNamingConventions &gt; should validate component names" time="0.0003944">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; checkNamingConventions &gt; should validate hook names" time="0.0003502">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; checkNamingConventions &gt; should validate file names" time="0.0003959">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; suggestImprovements &gt; should suggest performance improvements" time="0.000884">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; suggestImprovements &gt; should suggest accessibility improvements" time="0.0002881">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; suggestImprovements &gt; should suggest Context7 improvements" time="0.0002809">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; getValidationRules &gt; should return default validation rules" time="0.0001863">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; getValidationRules &gt; should override with config rules" time="0.0004097">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; getAppliedStandards &gt; should return React standards for React project" time="0.0005959">
        </testcase>
        <testcase classname="tests/unit/ToolManager.test.js" name="ToolManager &gt; getAppliedStandards &gt; should return base standards for non-React project" time="0.0009098">
        </testcase>
    </testsuite>
</testsuites>
