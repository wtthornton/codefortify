/**
 * JenkinsFormat - Jenkins CI/CD output formatter
 *
 * Generates output compatible with Jenkins:
 * - Sets build parameters for pipeline consumption
 * - Creates build artifacts
 * - Provides proper exit codes and status
 */

export class JenkinsFormat {
  constructor() {
    this.formatName = 'jenkins';
  }

  /**
   * Format evaluation results for Jenkins
   *
   * @param {Object} results - Evaluation results
   * @param {Object} config - Quality gates configuration
   * @returns {Promise<string>} Formatted output
   */
  async format(results, config) {
    const output = [];

    // Jenkins summary
    output.push('# üéØ Quality Gates Results');
    output.push('');
    output.push(`**Status:** ${results.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
    output.push(`**Overall Score:** ${results.results.overall}`);
    output.push(`**Gates Passed:** ${results.summary.passed}/${results.summary.total}`);    /**
   * Performs the specified operation
   * @param {any} results.summary.warnings > 0
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} results.summary.warnings > 0
   * @returns {any} The operation result
   */


    if (results.summary.warnings > 0) {
      output.push(`**Warnings:** ${results.summary.warnings}`);
    }

    output.push('');
    output.push('## Gate Details');
    output.push('');

    // Gate details table
    output.push('| Gate | Score | Threshold | Status |');
    output.push('|------|-------|-----------|--------|');

    results.gates.forEach(gate => {
      const status = gate.passed ? '‚úÖ PASS' : '‚ùå FAIL';
      const warning = gate.warning ? ' ‚ö†Ô∏è' : '';
      const threshold = gate.threshold ? gate.threshold : 'N/A';

      output.push(`| ${gate.name} | ${gate.score} | ${threshold} | ${status}${warning} |`);
    });

    // Failed gates details
    const failedGates = results.gates.filter(gate => !gate.passed);    /**
   * Performs the specified operation
   * @param {any} failedGates.length > 0
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} failedGates.length > 0
   * @returns {any} The operation result
   */

    if (failedGates.length > 0) {
      output.push('');
      output.push('## ‚ùå Failed Gates');
      output.push('');

      failedGates.forEach(gate => {
        output.push(`- **${gate.name}**: ${gate.message}`);        /**
   * Performs the specified operation
   * @param {boolean} gate.details.issues && gate.details.issues.length > 0
   * @returns {boolean} True if successful, false otherwise
   */
        /**
   * Performs the specified operation
   * @param {boolean} gate.details.issues && gate.details.issues.length > 0
   * @returns {boolean} True if successful, false otherwise
   */

        if (gate.details.issues && gate.details.issues.length > 0) {
          output.push('  - Issues:');
          gate.details.issues.forEach(issue => {
            output.push(`    - ${issue}`);
          });
        }
      });
    }

    // Warning gates details
    const warningGates = results.gates.filter(gate => gate.warning);    /**
   * Performs the specified operation
   * @param {any} warningGates.length > 0
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} warningGates.length > 0
   * @returns {any} The operation result
   */

    if (warningGates.length > 0) {
      output.push('');
      output.push('## ‚ö†Ô∏è Warning Gates');
      output.push('');

      warningGates.forEach(gate => {
        output.push(`- **${gate.name}**: ${gate.message}`);
      });
    }

    // Recommendations    /**
   * Performs the specified operation
   * @param {any} results.results.categories
   * @returns {any} The operation result
   */
    /**
   * Performs the specified operation
   * @param {any} results.results.categories
   * @returns {any} The operation result
   */

    if (results.results.categories) {
      const recommendations = this.extractRecommendations(results);      /**
   * Performs the specified operation
   * @param {any} recommendations.length > 0
   * @returns {any} The operation result
   */
      /**
   * Performs the specified operation
   * @param {any} recommendations.length > 0
   * @returns {any} The operation result
   */

      if (recommendations.length > 0) {
        output.push('');
        output.push('## üöÄ Quick Fixes');
        output.push('');

        recommendations.slice(0, 5).forEach(rec => {
          output.push(`- ${rec}`);
        });
      }
    }

    output.push('');
    output.push('---');
    output.push(`*Generated by Context7 Quality Gates at ${new Date().toISOString()}*`);

    return output.join('\n');
  }

  /**
   * Set Jenkins build parameters
   *
   * @param {Object} results - Evaluation results
   * @returns {void}
   */
  setBuildParameters(results) {
    // Set Jenkins build parameters
    this.setParameter('QUALITY_GATES_PASSED', results.passed.toString());
    this.setParameter('QUALITY_GATES_SCORE', results.results.overall.toString());
    this.setParameter('QUALITY_GATES_FAILED_COUNT', results.summary.failed.toString());
    this.setParameter('QUALITY_GATES_TOTAL_COUNT', results.summary.total.toString());
    this.setParameter('QUALITY_GATES_PASS_RATE', results.summary.passRate.toFixed(1));

    // Set individual gate results
    results.gates.forEach((gate, index) => {
      this.setParameter(`QUALITY_GATE_${index}_NAME`, gate.name);
      this.setParameter(`QUALITY_GATE_${index}_PASSED`, gate.passed.toString());
      this.setParameter(`QUALITY_GATE_${index}_SCORE`, gate.score.toString());
    });
  }

  /**
   * Set Jenkins build parameter
   *
   * @param {string} name - Parameter name
   * @param {string} value - Parameter value
   * @returns {void}
   */
  setParameter(name, value) {
    // In Jenkins, this would be written to a properties file
    const propertiesFile = process.env.JENKINS_PROPERTIES_FILE || 'jenkins.properties';
    const fs = require('fs');
    fs.appendFileSync(propertiesFile, `${name}=${value}\n`);
  }

  /**
   * Extract actionable recommendations from results
   *
   * @param {Object} results - Evaluation results
   * @returns {Array<string>} Array of recommendations
   */
  extractRecommendations(results) {
    const recommendations = [];

    // Extract from failed gates
    results.gates
      .filter(gate => !gate.passed)
      .forEach(gate => {        /**
   * Performs the specified operation
   * @param {any} gate.details.suggestions && gate.details.suggestions.length > 0
   * @returns {any} The operation result
   */
        /**
   * Performs the specified operation
   * @param {any} gate.details.suggestions && gate.details.suggestions.length > 0
   * @returns {any} The operation result
   */

        if (gate.details.suggestions && gate.details.suggestions.length > 0) {
          recommendations.push(...gate.details.suggestions.slice(0, 2));
        }
      });

    // Extract from warning gates
    results.gates
      .filter(gate => gate.warning)
      .forEach(gate => {        /**
   * Performs the specified operation
   * @param {any} gate.details.suggestions && gate.details.suggestions.length > 0
   * @returns {any} The operation result
   */
        /**
   * Performs the specified operation
   * @param {any} gate.details.suggestions && gate.details.suggestions.length > 0
   * @returns {any} The operation result
   */

        if (gate.details.suggestions && gate.details.suggestions.length > 0) {
          recommendations.push(...gate.details.suggestions.slice(0, 1));
        }
      });

    return recommendations;
  }

  /**
   * Get Jenkins pipeline example
   *
   * @returns {string} Jenkinsfile example
   */
  getPipelineExample() {
    return `pipeline {
    agent any
    
    stages {  /**
   * Performs the specified operation
   * @param {any} 'Quality Gates'
   * @returns {any} The operation result
   */
  /**
   * Performs the specified operation
   * @param {any} 'Quality Gates'
   * @returns {any} The operation result
   */

        stage('Quality Gates') {
            steps {
                script {
                    // Install dependencies
                    sh 'npm ci'
                    
                    // Run quality gates
                    sh 'npx codefortify score --gates --format=jenkins --output=quality-gates.md'
                    
                    // Read results
                    def qualityResults = readJSON file: 'quality-gates.json'
                    
                    // Set build parameters
                    env.QUALITY_GATES_PASSED = qualityResults.passed.toString()
                    env.QUALITY_GATES_SCORE = qualityResults.results.overall.toString()
                    env.QUALITY_GATES_FAILED_COUNT = qualityResults.summary.failed.toString()
                    
                    // Archive artifacts
                    archiveArtifacts artifacts: 'quality-gates.md', fingerprint: true
                    archiveArtifacts artifacts: 'quality-gates.json', fingerprint: true
                    
                    // Fail build if quality gates failed  /**
   * Performs the specified operation
   * @param {any} !qualityResults.passed
   * @returns {any} The operation result
   */
  /**
   * Performs the specified operation
   * @param {any} !qualityResults.passed
   * @returns {any} The operation result
   */

                    if (!qualityResults.passed) {
                        error "‚ùå Quality gates failed. Please fix the issues above."
                    } else {
                        echo "‚úÖ Quality gates passed"
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Publish test results
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'quality-gates.md',
                reportName: 'Quality Gates Report'
            ])
        }
        
        failure {
            // Send notification on failure
            emailext (
                subject: "Quality Gates Failed: \${env.JOB_NAME} - \${env.BUILD_NUMBER}",
                body: "Quality gates failed for build \${env.BUILD_NUMBER}.\\n\\nPlease check the build logs for details.",
                to: "\${env.CHANGE_AUTHOR_EMAIL}"
            )
        }
    }
}`;
  }
}
