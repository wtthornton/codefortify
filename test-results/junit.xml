<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="451" failures="11" errors="0" time="0.5384952">
    <testsuite name="tests/monitoring-workflow.test.js" timestamp="2025-09-02T19:10:36.427Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/cli/context7-cli.test.js" timestamp="2025-09-02T19:10:36.429Z" hostname="Mini_IT13" tests="28" failures="0" errors="0" skipped="4" time="0">
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Help and Version &gt; should display help when no arguments provided" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Help and Version &gt; should display help with --help flag" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Help and Version &gt; should display version with --version flag" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; should display init help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; should initialize a React project" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; should handle missing project type with prompt" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Init Command &gt; original prompt test" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Add Command &gt; should display add help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Add Command &gt; should add CodeFortify to existing project" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Validate Command &gt; should display validate help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Validate Command &gt; should validate project structure" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Validate Command &gt; should handle validation in strict mode" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Test-MCP Command &gt; should display test-mcp help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Test-MCP Command &gt; should handle missing MCP server file" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Serve Command &gt; should display serve help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Generate Command &gt; should display generate help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Generate Command &gt; should handle generate component" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Update Command &gt; should display update help" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Update Command &gt; should handle update command" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Global Options &gt; should handle verbose flag" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Global Options &gt; should handle custom project root" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Error Handling &gt; should handle unknown commands" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Error Handling &gt; should handle invalid options" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Error Handling &gt; should handle permission errors gracefully" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Project Type Detection &gt; should detect React projects" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Project Type Detection &gt; should handle projects without package.json" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Configuration Loading &gt; should load custom configuration when available" time="0">
        </testcase>
        <testcase classname="tests/cli/context7-cli.test.js" name="Context7 CLI &gt; Interactive Prompts &gt; should handle non-interactive environments" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/cli-commands.test.js" timestamp="2025-09-02T19:10:36.440Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/integration/context7-enhancement-system.test.js" timestamp="2025-09-02T19:10:36.441Z" hostname="Mini_IT13" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Complete Enhancement Workflow &gt; should perform complete enhancement workflow" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Complete Enhancement Workflow &gt; should integrate context analysis with pattern learning" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Complete Enhancement Workflow &gt; should integrate pattern learning with quality monitoring" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Complete Enhancement Workflow &gt; should integrate all three systems for continuous improvement" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Error Handling and Recovery &gt; should handle errors gracefully across all systems" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Error Handling and Recovery &gt; should recover from partial failures" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Performance and Scalability &gt; should handle large projects efficiently" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Performance and Scalability &gt; should maintain performance with caching" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Data Persistence and State Management &gt; should persist learned patterns across sessions" time="0">
        </testcase>
        <testcase classname="tests/integration/context7-enhancement-system.test.js" name="Context7 Enhancement System Integration &gt; Data Persistence and State Management &gt; should maintain quality monitoring state" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/enhanced-reporting.test.js" timestamp="2025-09-02T19:10:36.444Z" hostname="Mini_IT13" tests="15" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 1: Critical Enhancements &gt; should run complete analysis with enhanced data" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 1: Critical Enhancements &gt; should integrate real npm audit data" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 1: Critical Enhancements &gt; should integrate real ESLint analysis" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 1: Critical Enhancements &gt; should integrate real coverage metrics" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 2: Advanced Enhancements &gt; should perform bundle analysis" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 2: Advanced Enhancements &gt; should generate actionable recommendations" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Phase 2: Advanced Enhancements &gt; should track quality history" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; HTML Report Generation &gt; should generate enhanced HTML report" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; HTML Report Generation &gt; should contain enhanced data sections in HTML" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; HTML Report Generation &gt; should write HTML report to file" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Data Quality Validation &gt; should have consistent data across categories" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Data Quality Validation &gt; should have valid recommendations structure" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Data Quality Validation &gt; should have proper metadata" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Performance and Reliability &gt; should complete analysis within reasonable time" time="0">
        </testcase>
        <testcase classname="tests/integration/enhanced-reporting.test.js" name="Enhanced Reporting System &gt; Performance and Reliability &gt; should handle missing tools gracefully" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/enhancement-system.test.js" timestamp="2025-09-02T19:10:36.448Z" hostname="Mini_IT13" tests="17" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; ContinuousLoopController &gt; should orchestrate complete enhancement workflow" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; ContinuousLoopController &gt; should stop when target score is reached" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; ContinuousLoopController &gt; should handle event emissions correctly" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; Pattern Learning System &gt; should learn patterns from successful improvements" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; Pattern Learning System &gt; should apply learned patterns to new code" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; Pattern Learning System &gt; should track pattern effectiveness" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; Prompt Enhancement &gt; should enhance prompts with relevant context" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; Prompt Enhancement &gt; should track token usage and reduction" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; Prompt Enhancement &gt; should provide enhancement statistics" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; CLI Integration &gt; should execute enhance command successfully" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; CLI Integration &gt; should handle missing input gracefully" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; CLI Integration &gt; should auto-detect project files when no input provided" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; End-to-End Enhancement Workflow &gt; should complete full enhancement cycle with all components" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Enhancement System Integration &gt; End-to-End Enhancement Workflow &gt; should demonstrate measurable improvement over iterations" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Performance and Reliability &gt; should handle large code inputs efficiently" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Performance and Reliability &gt; should gracefully handle edge cases and errors" time="0">
        </testcase>
        <testcase classname="tests/integration/enhancement-system.test.js" name="Performance and Reliability &gt; should respect iteration limits" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/parallel-analysis-engine.test.js" timestamp="2025-09-02T19:10:36.451Z" hostname="Mini_IT13" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Performance Benchmarks &gt; should achieve 60-80% performance improvement over traditional analysis" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Performance Benchmarks &gt; should scale efficiently with larger projects" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Performance Benchmarks &gt; should demonstrate resource efficiency improvements" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Agent Orchestration &gt; should coordinate multiple agents in parallel" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Agent Orchestration &gt; should handle agent failures gracefully" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Agent Orchestration &gt; should provide real-time progress updates" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Resource Management &gt; should handle resource contention appropriately" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Resource Management &gt; should optimize resource allocation" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Backward Compatibility &gt; should maintain API compatibility with ProjectScorer" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Backward Compatibility &gt; should gracefully fallback to traditional analysis when agents fail" time="0">
        </testcase>
        <testcase classname="tests/integration/parallel-analysis-engine.test.js" name="Parallel Analysis Engine Integration &gt; Streaming and Real-time Features &gt; should provide streaming analysis results" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/realtime-integration.test.js" timestamp="2025-09-02T19:10:36.454Z" hostname="Mini_IT13" tests="15" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; WebSocket Server Integration &gt; should start WebSocket server and accept connections" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; WebSocket Server Integration &gt; should handle multiple concurrent connections" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; WebSocket Server Integration &gt; should broadcast events to all connected clients" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; Status Management Integration &gt; should update status and emit events" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; Status Management Integration &gt; should persist status across sessions" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; Status Management Integration &gt; should track agent progress correctly" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; File Status Writer Integration &gt; should write status to JSON file" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; File Status Writer Integration &gt; should write status to Markdown file" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; File Status Writer Integration &gt; should generate badge files" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; File Status Writer Integration &gt; should maintain status history" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; Message Queue Integration &gt; should queue and process messages with priorities" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; Message Queue Integration &gt; should deduplicate similar messages" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; End-to-End Integration &gt; should handle complete analysis workflow" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; End-to-End Integration &gt; should handle connection recovery" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-integration.test.js" name="Real-Time Integration Tests &gt; Performance Tests &gt; should handle high-frequency updates efficiently" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/realtime-performance.test.js" timestamp="2025-09-02T19:10:36.456Z" hostname="Mini_IT13" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Connection Performance &gt; should handle rapid connection establishment" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Connection Performance &gt; should maintain performance with many concurrent connections" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Message Throughput &gt; should handle high-frequency status updates" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Message Throughput &gt; should batch similar messages efficiently" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Memory Performance &gt; should not leak memory with long-running connections" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Memory Performance &gt; should handle connection cleanup efficiently" time="0">
        </testcase>
        <testcase classname="tests/integration/realtime-performance.test.js" name="Real-Time Performance Tests &gt; Stress Testing &gt; should remain stable under mixed load patterns" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/visual-testing-agent.test.js" timestamp="2025-09-02T19:10:36.457Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/AnalyzerErrorHandler.test.js" timestamp="2025-09-02T19:10:36.457Z" hostname="Mini_IT13" tests="37" failures="1" errors="0" skipped="36" time="0.0207636">
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Constructor and Configuration &gt; should initialize with provided configuration" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Constructor and Configuration &gt; should initialize with default configuration" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Constructor and Configuration &gt; should initialize empty error collections" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; AnalyzerError Class &gt; should create error with all parameters" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; AnalyzerError Class &gt; should use default values for optional parameters" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; AnalyzerError Class &gt; should convert to object correctly" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; AnalyzerError Class &gt; should handle null original error in toObject" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should classify file access errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should classify permission errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should classify timeout errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should classify parse errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should classify tool unavailable errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should classify network errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should default to unknown for unrecognized errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Classification &gt; should handle errors without messages" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Handling &gt; should handle AnalyzerError instances" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Handling &gt; should handle regular Error instances" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Handling &gt; should track error counts" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Handling &gt; should store critical errors in errors array" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Handling &gt; should store low severity errors in warnings array" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Handling &gt; should throw critical errors in fail fast mode" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Recovery Strategies &gt; should attempt recovery for file access errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Recovery Strategies &gt; should attempt recovery for tool unavailable errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Recovery Strategies &gt; should attempt recovery for parse errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Recovery Strategies &gt; should handle recovery for dependency missing errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Recovery Strategies &gt; should handle unknown error types in recovery" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Execute With Retry &gt; should execute function successfully on first try" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Execute With Retry &gt; should retry on failure and eventually succeed" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Execute With Retry &gt; should exhaust retries and throw last error" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Execute With Retry &gt; should not retry permission errors" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Execute With Retry &gt; should use custom retry count" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Summary Generation &gt; should generate complete error summary" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error State Management &gt; should reset all error state" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error State Management &gt; should return all issues in structured format" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Types and Severity Constants &gt; should export all error types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="AnalyzerErrorHandler &gt; Error Types and Severity Constants &gt; should export all severity levels" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/AnalyzerErrorHandler.test.js" name="tests/unit/AnalyzerErrorHandler.test.js" time="0.0207636">
            <failure message="ENOENT: no such file or directory, open &apos;C:\cursor\context7-mcp\tests\fixtures\test-project\.codefortify\standards\context7-standards.md&apos;" type="Error">
Error: ENOENT: no such file or directory, open &apos;C:\cursor\context7-mcp\tests\fixtures\test-project\.codefortify\standards\context7-standards.md&apos;
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: -4058, code: &apos;ENOENT&apos;, syscall: &apos;open&apos;, path: &apos;C:\cursor\context7-mcp\tests\fixtures\test-project\.codefortify\standards\context7-standards.md&apos; }
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/BaseAnalyzer.test.js" timestamp="2025-09-02T19:10:36.467Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/CommandCoordinator.test.js" timestamp="2025-09-02T19:10:36.467Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/fileUtils.test.js" timestamp="2025-09-02T19:10:36.468Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/PatternProvider.test.js" timestamp="2025-09-02T19:10:36.468Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/ProjectScorer.test.js" timestamp="2025-09-02T19:10:36.468Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/RecommendationEnhancements.test.js" timestamp="2025-09-02T19:10:36.469Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/ResourceManager.test.js" timestamp="2025-09-02T19:10:36.469Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/ResultsProcessor.test.js" timestamp="2025-09-02T19:10:36.469Z" hostname="Mini_IT13" tests="30" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; Constructor and Configuration &gt; should initialize with provided configuration" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; Constructor and Configuration &gt; should initialize with empty config when none provided" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; initializeResults &gt; should create complete results structure" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; initializeResults &gt; should initialize overall results correctly" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; initializeResults &gt; should initialize metadata correctly" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; initializeResults &gt; should use default version when not provided" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; processAnalyzerResult &gt; should process complete analyzer result" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; processAnalyzerResult &gt; should handle missing optional fields" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; processAnalyzerResult &gt; should cap score at maxScore" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; processAnalyzerResult &gt; should ensure score is not negative" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; processAnalyzerResult &gt; should handle zero maxScore" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; processAnalyzerResult &gt; should handle error results" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; calculateOverallScore &gt; should calculate overall score from categories" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; calculateOverallScore &gt; should detect errors in categories" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; calculateOverallScore &gt; should handle empty categories" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; calculateGrade &gt; should return correct grades for different percentages" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; getPerformanceLevel &gt; should return correct performance levels" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; getComplexityScore &gt; should return correct complexity scores" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; getComplexityScore &gt; should handle edge case at exact threshold" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; aggregateRecommendations &gt; should collect and sort recommendations" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; aggregateRecommendations &gt; should remove duplicate recommendations" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; addSystemInfo &gt; should add system info to results" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; validateResults &gt; should validate complete results structure" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; validateResults &gt; should detect missing overall results" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; validateResults &gt; should detect missing categories" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; validateResults &gt; should detect score inconsistency" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; formatResultsForOutput &gt; should format console output" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; formatResultsForOutput &gt; should format JSON output" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; formatResultsForOutput &gt; should format summary output" time="0">
        </testcase>
        <testcase classname="tests/unit/ResultsProcessor.test.js" name="ResultsProcessor &gt; formatResultsForOutput &gt; should return raw results for unknown format" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/scoringConfig.test.js" timestamp="2025-09-02T19:10:36.473Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/ScoringReport.test.js" timestamp="2025-09-02T19:10:36.473Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/ToolChecker.test.js" timestamp="2025-09-02T19:10:36.474Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/ToolManager.test.js" timestamp="2025-09-02T19:10:36.474Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/agents/AnalysisAgent.test.js" timestamp="2025-09-02T19:10:36.474Z" hostname="Mini_IT13" tests="28" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Constructor &gt; should initialize with default config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Constructor &gt; should initialize with provided config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Constructor &gt; should initialize performance monitor and project type detector" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Constructor &gt; should initialize analysis modules and history" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyze &gt; should perform basic analysis when depth is basic" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyze &gt; should perform comprehensive analysis when depth is comprehensive" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyze &gt; should perform deep analysis when depth is deep" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyze &gt; should include predictive analysis when enabled and iteration history exists" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyze &gt; should store analysis in history" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyze &gt; should handle analysis errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzeArchitecture &gt; should analyze code architecture patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzeArchitecture &gt; should identify microservices architecture" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzePatterns &gt; should identify code patterns from review result" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzePatterns &gt; should calculate pattern confidence scores" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzePerformance &gt; should analyze code performance characteristics" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzePerformance &gt; should identify performance bottlenecks" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzeMaintainability &gt; should analyze code maintainability metrics" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; analyzeMaintainability &gt; should calculate cyclomatic complexity" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; assessTechnicalDebt &gt; should assess technical debt in code" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; assessTechnicalDebt &gt; should identify different types of technical debt" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Analysis History &gt; should maintain analysis history" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Analysis History &gt; should include timestamp in analysis history" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Error Handling &gt; should handle missing dependencies gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Error Handling &gt; should handle malformed code input" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Error Handling &gt; should handle invalid review results" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Configuration Variations &gt; should work with minimal config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Configuration Variations &gt; should disable predictive analysis when configured" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/AnalysisAgent.test.js" name="AnalysisAgent &gt; Configuration Variations &gt; should handle different project types" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/agents/EnhancementAgent.test.js" timestamp="2025-09-02T19:10:36.478Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/agents/ImprovementAgent.test.js" timestamp="2025-09-02T19:10:36.478Z" hostname="Mini_IT13" tests="34" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Constructor &gt; should initialize with default config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Constructor &gt; should initialize with provided config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Constructor &gt; should initialize improvement strategies and applied fixes" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; improve &gt; should identify and apply improvements successfully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; improve &gt; should track performance metrics" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; improve &gt; should handle empty review and analysis results" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; improve &gt; should respect max improvements limit" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; improve &gt; should respect priority threshold" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; improve &gt; should handle improvement errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; identifyImprovementOpportunities &gt; should extract opportunities from review issues" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; identifyImprovementOpportunities &gt; should extract opportunities from review recommendations" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; identifyImprovementOpportunities &gt; should extract opportunities from analysis insights" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; identifyImprovementOpportunities &gt; should extract opportunities from technical debt recommendations" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; identifyImprovementOpportunities &gt; should handle missing or malformed input" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; prioritizeImprovements &gt; should prioritize by severity and priority" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; prioritizeImprovements &gt; should filter by priority threshold" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; prioritizeImprovements &gt; should handle opportunities without explicit priority" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; applyImprovements &gt; should apply multiple improvements to code" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; applyImprovements &gt; should handle improvements that don&apos;t apply" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; applyImprovements &gt; should track successful and failed improvements" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; validateImprovements &gt; should validate that improvements don&apos;t break syntax" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; validateImprovements &gt; should detect syntax errors in improved code" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; validateImprovements &gt; should provide rollback recommendation for invalid improvements" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Improvement Strategies &gt; should initialize improvement strategies" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Improvement Strategies &gt; should have strategies for common improvement types" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Applied Fixes Tracking &gt; should track applied fixes" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Applied Fixes Tracking &gt; should include metadata in applied fixes" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Configuration Variations &gt; should handle different project types" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Configuration Variations &gt; should handle custom priority threshold" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Configuration Variations &gt; should handle custom max improvements limit" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Error Handling &gt; should handle invalid input gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Error Handling &gt; should handle improvement application errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Error Handling &gt; should handle validation errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/ImprovementAgent.test.js" name="ImprovementAgent &gt; Integration &gt; should work with complex real-world scenarios" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/agents/QualityAgent.test.js" timestamp="2025-09-02T19:10:36.485Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/agents/SecurityAgent.test.js" timestamp="2025-09-02T19:10:36.486Z" hostname="Mini_IT13" tests="28" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; constructor &gt; should initialize with correct default values" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; constructor &gt; should initialize security patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; constructor &gt; should initialize with custom config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; execute &gt; should execute all security analysis phases" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; execute &gt; should skip disabled analysis phases" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; execute &gt; should handle execution errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeNpmSecurity &gt; should analyze npm audit results successfully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeNpmSecurity &gt; should handle npm audit with vulnerabilities (non-zero exit)" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeNpmSecurity &gt; should handle npm audit parsing errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; scanForSecrets &gt; should scan files for potential secrets" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; scanForSecrets &gt; should handle secret scanning errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeDependencySecurity &gt; should analyze dependency security" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeDependencySecurity &gt; should handle missing package.json" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeErrorHandling &gt; should analyze error handling patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateFinalScore &gt; should add npm security suggestions for vulnerabilities" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateFinalScore &gt; should add secrets suggestions when found" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateSecurityScore &gt; should return maximum score for no vulnerabilities" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateSecurityScore &gt; should calculate score based on vulnerability severity" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateSecurityScore &gt; should not go below zero" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; scanFileForSecrets &gt; should detect hardcoded secrets" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; scanFileForSecrets &gt; should detect secret logging" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; scanFileForSecrets &gt; should detect eval usage" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; scanFileForSecrets &gt; should handle file reading errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeDependencyRisk &gt; should identify high-risk packages" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; analyzeDependencyRisk &gt; should return empty array for safe packages" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateOverallRisk &gt; should return high risk for high severity factors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateOverallRisk &gt; should return medium risk for medium severity factors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/SecurityAgent.test.js" name="SecurityAgent &gt; calculateOverallRisk &gt; should return low risk for no factors" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/agents/StructureAgent.test.js" timestamp="2025-09-02T19:10:36.490Z" hostname="Mini_IT13" tests="31" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; constructor &gt; should initialize with correct default values" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; constructor &gt; should initialize naming patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; constructor &gt; should initialize with custom config" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; execute &gt; should execute all structure analysis phases" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; execute &gt; should skip disabled analysis phases" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; execute &gt; should handle execution errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeFileOrganization &gt; should analyze directory structure successfully" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeFileOrganization &gt; should handle file organization analysis errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeNamingConventions &gt; should analyze naming conventions across files" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeNamingConventions &gt; should handle naming analysis errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeArchitecturePatterns &gt; should detect architectural patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeArchitecturePatterns &gt; should handle architecture analysis errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeModularization &gt; should analyze code modularization" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeModularization &gt; should handle modularization analysis errors" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateFinalScore &gt; should calculate final score and grade" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateFinalScore &gt; should add organization suggestions for low depth score" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateFinalScore &gt; should add naming suggestions for low consistency" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateDepthScore &gt; should give optimal score for ideal depth" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateDepthScore &gt; should give lower score for extreme depths" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeFileNaming &gt; should score files with good naming conventions" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeFileNaming &gt; should handle empty file list" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; analyzeFileNaming &gt; should properly test naming patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateNamingConsistency &gt; should calculate consistency from scoring variance" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateNamingConsistency &gt; should return high consistency for similar scores" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateVariance &gt; should calculate correct variance" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateVariance &gt; should return zero variance for identical numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; calculateVariance &gt; should handle single number" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; helper methods &gt; should get project files" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; helper methods &gt; should analyze directory structure" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; helper methods &gt; should detect architectural patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/agents/StructureAgent.test.js" name="StructureAgent &gt; helper methods &gt; should identify modules" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/cli/CommandCoordinator.test.js" timestamp="2025-09-02T19:10:36.494Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/context/AdvancedContextAnalyzer.minimal.test.js" timestamp="2025-09-02T19:10:36.494Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/context/AdvancedContextAnalyzer.test.js" timestamp="2025-09-02T19:10:36.494Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/context/ArchitectureDetector.test.js" timestamp="2025-09-02T19:10:36.495Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/context/CodeStyleAnalyzer.test.js" timestamp="2025-09-02T19:10:36.495Z" hostname="Mini_IT13" tests="26" failures="10" errors="0" skipped="0" time="0.4536226">
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; constructor &gt; should initialize with default configuration" time="0.049384">
            <failure message="expected undefined to be an instance of Map" type="AssertionError">
AssertionError: expected undefined to be an instance of Map
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:38:35
            </failure>
            <failure message="expected undefined to be an instance of Map" type="AssertionError">
AssertionError: expected undefined to be an instance of Map
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:38:35
            </failure>
            <failure message="expected undefined to be an instance of Map" type="AssertionError">
AssertionError: expected undefined to be an instance of Map
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:38:35
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodeStyle &gt; should detect Prettier configuration" time="0.0460612">
            <failure message="expected undefined to be &apos;prettier&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;prettier&apos; // Object.is equality

- Expected: 
&quot;prettier&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:59:31
            </failure>
            <failure message="expected undefined to be &apos;prettier&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;prettier&apos; // Object.is equality

- Expected: 
&quot;prettier&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:59:31
            </failure>
            <failure message="expected undefined to be &apos;prettier&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;prettier&apos; // Object.is equality

- Expected: 
&quot;prettier&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:59:31
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodeStyle &gt; should detect ESLint configuration" time="0.027861">
            <failure message="expected undefined to be &apos;eslint&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;eslint&apos; // Object.is equality

- Expected: 
&quot;eslint&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:87:28
            </failure>
            <failure message="expected undefined to be &apos;eslint&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;eslint&apos; // Object.is equality

- Expected: 
&quot;eslint&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:87:28
            </failure>
            <failure message="expected undefined to be &apos;eslint&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;eslint&apos; // Object.is equality

- Expected: 
&quot;eslint&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:87:28
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodeStyle &gt; should detect multiple style tools" time="0.0356927">
            <failure message="expected undefined to be &apos;prettier&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;prettier&apos; // Object.is equality

- Expected: 
&quot;prettier&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:117:31
            </failure>
            <failure message="expected undefined to be &apos;prettier&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;prettier&apos; // Object.is equality

- Expected: 
&quot;prettier&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:117:31
            </failure>
            <failure message="expected undefined to be &apos;prettier&apos; // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be &apos;prettier&apos; // Object.is equality

- Expected: 
&quot;prettier&quot;

+ Received: 
undefined

 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:117:31
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodeStyle &gt; should analyze code patterns from source files" time="0.0405787">
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:142:30
            </failure>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:142:30
            </failure>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:142:30
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodeStyle &gt; should handle TypeScript files" time="0.0260219">
            <failure message="the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:163:31
            </failure>
            <failure message="the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:163:31
            </failure>
            <failure message="the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:163:31
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodeStyle &gt; should handle React/JSX files" time="0.0253007">
            <failure message="the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:183:31
            </failure>
            <failure message="the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:183:31
            </failure>
            <failure message="the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:183:31
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; detectFormatter &gt; should detect Prettier from .prettierrc" time="0.0147435">
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:194:40
            </failure>
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:194:40
            </failure>
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:194:40
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; detectFormatter &gt; should detect Prettier from package.json" time="0.0152494">
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:210:40
            </failure>
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:210:40
            </failure>
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:210:40
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; detectFormatter &gt; should return null when no formatter detected" time="0.0141241">
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:216:40
            </failure>
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:216:40
            </failure>
            <failure message="analyzer.detectFormatter is not a function" type="TypeError">
TypeError: analyzer.detectFormatter is not a function
 ❯ tests/unit/context/CodeStyleAnalyzer.test.js:216:40
            </failure>
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; detectLinter &gt; should detect ESLint from eslint.config.js" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; detectLinter &gt; should detect ESLint from .eslintrc.json" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; detectLinter &gt; should return null when no linter detected" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodePatterns &gt; should analyze quote usage patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodePatterns &gt; should analyze semicolon usage" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodePatterns &gt; should analyze indentation patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; analyzeCodePatterns &gt; should analyze import/export patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; getStyleRecommendations &gt; should provide style recommendations" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; getStyleRecommendations &gt; should recommend formatter when none detected" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; getStyleRecommendations &gt; should recommend linter when none detected" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; caching &gt; should cache analysis results" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; caching &gt; should clear cache" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; error handling &gt; should handle non-existent directory" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; error handling &gt; should handle invalid configuration files" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; error handling &gt; should handle unreadable files gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/context/CodeStyleAnalyzer.test.js" name="CodeStyleAnalyzer &gt; performance &gt; should complete analysis within reasonable time" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/context/simple.test.js" timestamp="2025-09-02T19:10:36.518Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/core/ContinuousLoopController.test.js" timestamp="2025-09-02T19:10:36.518Z" hostname="Mini_IT13" tests="25" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; constructor &gt; should initialize with provided config" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; constructor &gt; should use default values when not provided" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; constructor &gt; should initialize agents" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; constructor &gt; should initialize visual testing agent when enabled" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; constructor &gt; should not initialize visual testing agent when disabled" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; constructor &gt; should initialize tracking variables" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; startContinuousLoop &gt; should run through all iterations when target not reached" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; startContinuousLoop &gt; should stop early when target score is reached" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; startContinuousLoop &gt; should stop on convergence threshold" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; startContinuousLoop &gt; should throw error if already running" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; startContinuousLoop &gt; should emit proper events during loop execution" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; runSingleIteration &gt; should execute configured agents in sequence" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; runSingleIteration &gt; should not execute enhancement agent in monitoring mode" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; runSingleIteration &gt; should execute enhancement agent when explicitly enabled" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; runSingleIteration &gt; should handle agent execution errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; runSingleIteration &gt; should aggregate scores and improvements from agents" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; status and control methods &gt; should return current status" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; status and control methods &gt; should return metrics" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; status and control methods &gt; should calculate average score correctly" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; status and control methods &gt; should stop running loop" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; status and control methods &gt; should reset controller state" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; real-time infrastructure &gt; should initialize real-time components when enabled" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; real-time infrastructure &gt; should not initialize real-time components when disabled" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; event emission &gt; should emit target-reached event when score meets target" time="0">
        </testcase>
        <testcase classname="tests/unit/core/ContinuousLoopController.test.js" name="ContinuousLoopController &gt; event emission &gt; should emit converged event when convergence threshold is reached" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/core/RealtimeEventEmitter.test.js" timestamp="2025-09-02T19:10:36.522Z" hostname="Mini_IT13" tests="29" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; constructor &gt; should initialize with provided config" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; constructor &gt; should use default values when not provided" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; constructor &gt; should initialize tracking variables" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; server lifecycle &gt; should start server successfully" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; server lifecycle &gt; should throw error if already started" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; server lifecycle &gt; should stop server successfully" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; server lifecycle &gt; should handle stop when not started" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event emission &gt; should emit status update" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event emission &gt; should emit iteration start" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event emission &gt; should emit iteration end" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event emission &gt; should emit agent result" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; client management &gt; should add client successfully" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; client management &gt; should reject client when at capacity" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; client management &gt; should remove client" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; client management &gt; should close client connection safely" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; client management &gt; should handle client close errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event buffering &gt; should buffer events when server not started" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event buffering &gt; should respect buffer size limit" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event buffering &gt; should flush buffer to new client" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; event buffering &gt; should clear buffer" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; broadcasting &gt; should broadcast event to all connected clients" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; broadcasting &gt; should handle client send errors during broadcast" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; broadcasting &gt; should remove clients with closed connections" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; heartbeat &gt; should start heartbeat timer" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; heartbeat &gt; should stop heartbeat timer" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; heartbeat &gt; should not start multiple timers" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; statistics and monitoring &gt; should return comprehensive stats" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; statistics and monitoring &gt; should return connected clients info" time="0">
        </testcase>
        <testcase classname="tests/unit/core/RealtimeEventEmitter.test.js" name="RealtimeEventEmitter &gt; statistics and monitoring &gt; should track statistics during operation" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/learning/DynamicPatternLearner.test.js" timestamp="2025-09-02T19:10:36.525Z" hostname="Mini_IT13" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; constructor &gt; should initialize with default configuration" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; constructor &gt; should initialize with custom configuration" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; learnFromSuccess &gt; should learn patterns from successful code" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; learnFromSuccess &gt; should learn from multiple code examples" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; learnFromSuccess &gt; should handle failed code examples" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; learnFromSuccess &gt; should extract patterns from code structure" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; getPatternSuggestions &gt; should suggest patterns based on context" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; getPatternSuggestions &gt; should rank suggestions by effectiveness" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; getPatternSuggestions &gt; should return empty array when no patterns match" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; updatePatternEffectiveness &gt; should update pattern effectiveness based on feedback" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; updatePatternEffectiveness &gt; should handle negative feedback" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; getLearnedPatterns &gt; should return all learned patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; getLearnedPatterns &gt; should filter patterns by criteria" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; exportPatterns &gt; should export patterns to file" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; importPatterns &gt; should import patterns from file" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; error handling &gt; should handle invalid code context" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; error handling &gt; should handle file system errors" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; error handling &gt; should handle invalid feedback data" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/DynamicPatternLearner.test.js" name="DynamicPatternLearner &gt; performance &gt; should handle large numbers of patterns efficiently" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/learning/IssueLearningSystem.test.js" timestamp="2025-09-02T19:10:36.527Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/learning/PatternDatabase.test.js" timestamp="2025-09-02T19:10:36.527Z" hostname="Mini_IT13" tests="28" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; constructor &gt; should initialize with default configuration" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; constructor &gt; should initialize with custom configuration" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; store &gt; should save a new pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; store &gt; should update existing pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; store &gt; should generate ID if not provided" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; store &gt; should validate pattern data" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; getPattern &gt; should retrieve existing pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; getPattern &gt; should return null for non-existent pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; getPattern &gt; should update lastUsed timestamp on retrieval" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should search by language" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should search by pattern type" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should search by effectiveness threshold" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should search by usage count" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should combine multiple search criteria" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should return empty array when no patterns match" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should limit results when specified" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; searchPatterns &gt; should sort results by effectiveness by default" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; deletePattern &gt; should delete existing pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; deletePattern &gt; should return false for non-existent pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; getAllPatterns &gt; should return all patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; getAllPatterns &gt; should return empty array when no patterns exist" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; getPatternStats &gt; should return database statistics" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; backup and restore &gt; should create backup of patterns" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; backup and restore &gt; should restore patterns from backup" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; error handling &gt; should handle invalid pattern data" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; error handling &gt; should handle file system errors gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; error handling &gt; should handle corrupted backup files" time="0">
        </testcase>
        <testcase classname="tests/unit/learning/PatternDatabase.test.js" name="PatternDatabase &gt; performance &gt; should handle large numbers of patterns efficiently" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/monitoring/CodeAnalysisEngine.test.js" timestamp="2025-09-02T19:10:36.532Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/monitoring/RealtimeQualityMonitor.test.js" timestamp="2025-09-02T19:10:36.532Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/utils/PerformanceOptimizer.test.js" timestamp="2025-09-02T19:10:36.533Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/server/CodeFortifyMCPServer.test.js" timestamp="2025-09-02T19:10:36.533Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/learning/patterns/PatternSearchStrategy.test.js" timestamp="2025-09-02T19:10:36.533Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/learning/patterns/PatternSimilarityCalculator.test.js" timestamp="2025-09-02T19:10:36.533Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" timestamp="2025-09-02T19:10:36.534Z" hostname="Mini_IT13" tests="33" failures="0" errors="0" skipped="0" time="0.064109">
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; constructor &gt; should initialize with provided config" time="0.0023096">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; constructor &gt; should use default values when not provided" time="0.0004345">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; constructor &gt; should initialize results structure correctly" time="0.0014571">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; constructor &gt; should set default category name and description" time="0.0004554">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; constructor &gt; should initialize error handler" time="0.0002961">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; analyze method &gt; should handle unimplemented runAnalysis gracefully" time="0.0013141">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; analyze method &gt; should calculate grade based on score percentage" time="0.0006643">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; analyze method &gt; should include execution time in results" time="0.0099943">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; analyze method &gt; should include error summary and issues in results" time="0.0014823">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; analyze method &gt; should handle recoverable errors" time="0.0024345">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; calculateGrade &gt; should return correct grades for different percentages" time="0.0004836">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; addScore &gt; should add points to total score" time="0.0001996">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; addScore &gt; should handle multiple scores" time="0.0001234">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; addIssue &gt; should add issue to results" time="0.000237">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; addIssue &gt; should add suggestion when provided" time="0.0005086">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; setDetail &gt; should set detail value" time="0.0001631">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; project type detection &gt; should detect React project" time="0.0002453">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; project type detection &gt; should detect Vue project" time="0.0001505">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; project type detection &gt; should detect Svelte project" time="0.0002075">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; project type detection &gt; should detect Node project" time="0.0002057">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; project type detection &gt; should detect JavaScript project" time="0.0001796">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; pattern matching &gt; containsPattern &gt; should detect string patterns" time="0.0002508">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; pattern matching &gt; containsPattern &gt; should detect regex patterns" time="0.0003937">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; pattern matching &gt; containsPattern &gt; should handle array of patterns" time="0.0002236">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; pattern matching &gt; countPatterns &gt; should count string occurrences" time="0.0002408">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; pattern matching &gt; countPatterns &gt; should count regex matches" time="0.0002643">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; pattern matching &gt; countPatterns &gt; should handle array of patterns" time="0.0001999">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; scoring utilities &gt; scoreByPresence &gt; should score items by presence" time="0.000509">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; scoring utilities &gt; scoreByQuality &gt; should score items by quality" time="0.0004514">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; safeCommandExecution &gt; should execute command successfully" time="0.0165129">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; safeCommandExecution &gt; should handle command failures gracefully" time="0">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; safeJsonParse &gt; should parse valid JSON" time="0">
        </testcase>
        <testcase classname="tests/unit/scoring/analyzers/BaseAnalyzer.test.js" name="BaseAnalyzer &gt; utility methods &gt; safeJsonParse &gt; should handle invalid JSON with default value" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/scoring/core/AnalyzerOrchestrator.test.js" timestamp="2025-09-02T19:10:36.537Z" hostname="Mini_IT13" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
</testsuites>
